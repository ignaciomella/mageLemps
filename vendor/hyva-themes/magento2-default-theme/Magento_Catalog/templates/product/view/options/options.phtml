<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductPage;
use Hyva\Theme\ViewModel\ProductPrice;
use Magento\Catalog\Block\Product\View\Options;
use Magento\Catalog\Model\Product\Option;
use Magento\Framework\Escaper;

/** @var Escaper $escaper */
/** @var Options $block */
/** @var ViewModelRegistry $viewModels */
/** @var Option $option */

/** @var ProductPage $productViewModel */
$productViewModel = $viewModels->require(ProductPage::class);

$product = $block->getProduct();

/** @var ProductPrice $productPriceViewModel */
$productPriceViewModel = $viewModels->require(ProductPrice::class);

$displayTax = $productPriceViewModel->displayPriceIncludingTax();

$options = $block->decorateArray($block->getOptions());

?>
<?php if (count($options)): ?>
    <script>
        function initOptions() {
            return {
                optionConfig: <?= /* @noEscape */ $block->getJsonConfig() ?>,
                regularPriceKey: '<?= /* @noEscape */ $displayTax ? 'oldPrice' : 'baseOldPrice' ?>',
                finalPriceKey: '<?= /* @noEscape */ $displayTax ? 'finalPrice' : 'basePrice' ?>',
                productFinalPrice: false,
                customOptionPrices: {},
                refs: [],
                getFormattedOptionPrice(optionId) {
                    if (this.customOptionPrices[optionId]) {
                        const showSign = true;
                        return hyva.formatPrice(this.customOptionPrices[optionId], showSign);
                    }
                    return false;
                },
                calculateOptionPrices() {
                    for (const [customOptionId, customOption] of Object.entries(this.optionConfig)) {
                        if (customOption.prices) {
                            this.customOptionPrices[customOptionId] =
                                this.calculateOptionPrice(customOption,customOptionId);
                        } else {
                            for (const [childCustomOptionId, childCustomOption] of Object.entries(customOption)) {
                                this.customOptionPrices[customOptionId + '_' + childCustomOptionId] =
                                    this.calculateOptionPrice(childCustomOption,customOptionId,childCustomOptionId);
                            }
                        }
                    }

                    window.dispatchEvent(
                        new CustomEvent(
                            "update-custom-option-prices",
                            {detail: this.customOptionPrices}
                        )
                    );
                },
                calculateOptionPrice(customOption, customOptionId, childCustomOptionId) {
                    const customOptionCode = customOptionId + (childCustomOptionId ? '-' + childCustomOptionId : '') ;

                    const optionElement = this.refs && this.refs['option-'+customOptionCode];

                    let price = customOption.prices[this.finalPriceKey].amount;

                    if (this.productFinalPrice &&
                        optionElement &&
                        optionElement.dataset.priceAmount &&
                        optionElement.dataset.priceType
                    ) {
                        price = optionElement.dataset.priceType !== 'percent' ?
                            optionElement.dataset.priceAmount :
                            this.productFinalPrice * (optionElement.dataset.priceAmount / 100)
                    }

                    return price;
                },
                updateCustomOptionValue($dispatch, customOptionId, target) {
                    let active;
                    switch (target.type) {
                        case 'text':
                        case 'textarea':
                        case 'file':
                            active = !!target.value;
                        break;
                        case 'hidden':
                            // when we're configuring an item in the cart that already has an attachment
                            // this is only needed on page-initialization
                            active = (target.value === 'save_old')
                        break;
                        case 'select-one':
                        case 'select-multiple':
                            Array.from(target.options).forEach(option => {
                                customOptionId = option.dataset.optionId;
                                active = option.selected;
                                $dispatch('update-custom-option-active', { customOptionId, active });
                            });
                            return;
                        break;
                        case 'radio':
                            target.checked && document.querySelectorAll('input[name="'+target.name+'"]')
                                .forEach(input => {
                                    // unset sibling radio buttons
                                    input.dataset &&
                                    input.dataset.optionId &&
                                    input !== target && $dispatch('update-custom-option-active',
                                        {
                                            customOptionId: input.dataset.optionId,
                                            active: false
                                        }
                                    );
                                });
                        // DO NOT BREAK
                        // Checkbox case should also run for Radio
                        case 'checkbox':
                            const requiredOptions = document
                                .querySelectorAll('input[name="'+target.name+'"][data-required]');
                            const checkedOptionsQty = Array.from(requiredOptions)
                                .filter(option => option.checked).length;

                            requiredOptions.forEach(input => {
                                if (checkedOptionsQty) {
                                    input.required = false;
                                    input.setCustomValidity('');
                                } else {
                                    input.required = false;
                                    input.setCustomValidity(input.dataset.validationMessage);
                                }
                            });
                            active = target.checked;
                        break;
                    }
                    $dispatch('update-custom-option-active', { customOptionId, active });
                },
                initSelectedOptions($dispatch) {
                    Array.from(document.querySelectorAll('.product-custom-option')).forEach(customOption => {
                        this.updateCustomOptionValue($dispatch, customOption.dataset.optionId, customOption);
                    })
                },
                eventListeners: {
                    ['@update-product-final-price.window'](event) {
                        this.productFinalPrice = event.detail;
                        this.calculateOptionPrices();
                    }
                }
            }
        }
    </script>
    <h2 class="text-gray-900 text-xl title-font font-medium mb-4">
        <?= $escaper->escapeHtml(__('Customizable Options')) ?>:
    </h2>
    <div x-data="initOptions()"
         x-init="
            refs = $refs;
            $nextTick(() => { calculateOptionPrices(); initSelectedOptions($dispatch); })
         "
         x-spread="eventListeners"
         class="mb-6">
    <?php foreach ($options as $option):?>
        <?= $block->getOptionHtml($option) ?>
    <?php endforeach; ?>
    </div>
<?php endif; ?>
