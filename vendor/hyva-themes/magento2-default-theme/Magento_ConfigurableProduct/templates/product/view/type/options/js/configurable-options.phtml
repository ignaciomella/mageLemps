<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
?>
<script>
    function initConfigurableOptions(productId, optionConfig) {

        function findPathParam(key) {
            // get all path pairs after BASE_URL/front_name/action_path/action
            const baseUrl = (BASE_URL.substr(0, 2) === '//' ? 'http:' : '') + BASE_URL;
            const baseUrlParts = (new URL(baseUrl)).pathname.replace(/\/$/, '').split('/');
            const pathParts = window.location.pathname.split('/').slice(baseUrlParts.length + 3);
            for (let i = 0; i < pathParts.length; i += 2) {
                if (pathParts[i] === key && pathParts.length > i) {
                    return pathParts[i + 1];
                }
            }
        }

        return {
            optionConfig,
            productId,
            itemId: (new URLSearchParams(window.location.search)).get('id') || findPathParam('id'),
            allowedAttributeOptions: [],
            selectedValues: [],
            init() {
                this.findAllowedAttributeOptions();
                this.$nextTick(() => {
                    <?php // Check this.itemId is set to avoid defaultValues being evaluated from cache ?>
                    if (this.itemId && typeof this.optionConfig.defaultValues === 'object') {
                        for (const [optionId, value] of Object.entries(this.optionConfig.defaultValues)) {
                            this.changeOption(optionId, value + '');
                        }
                    }
                });
            },
            findSimpleIndex() {
                // a better method name would be `updateSelectedSimpleIndex` but keeping for bc
                this.productIndex = this.calculateSimpleIndexForFullSelection(this.selectedValues);
            },
            calculateSimpleIndexForFullSelection(selectedValues) {
                const productIndexes = this.optionConfig.index;
                return Object.keys(productIndexes).find(productIndex => {
                    const productCandidateOptions = productIndexes[productIndex];

                    for (const productOption in productCandidateOptions) {
                        if (
                            ! selectedValues[productOption] ||
                            selectedValues[productOption] !== productCandidateOptions[productOption]
                        ) {
                            return false;
                        }
                    }
                    return productIndex;
                });
            },
            productIndex: 0,
            findAllowedAttributeOptions() {
                // a better method name would be `updateAllowedAttributeOptions` but keeping for bc
                this.allowedAttributeOptions = this.calculateAllowedAttributeOptions(this.selectedValues);
            },
            calculateAllowedAttributeOptions(selectedValues) {
                const allAttributes = this.optionConfig.attributes;
                const allAttributesSorted = Object.values(allAttributes).sort((a,b) => {
                    return a.position - b.position
                });
                const productIndexes = this.optionConfig.index;
                let previousOption = false;
                let availableIndexes = Object.keys(productIndexes);

                const newAllowedAttributeOptions = [];

                allAttributesSorted.forEach(attribute => {
                    if (previousOption && selectedValues[previousOption]) {
                        availableIndexes = availableIndexes.filter(availableIndex => {
                            return productIndexes[availableIndex][previousOption] ===
                                selectedValues[previousOption]
                        })
                    }
                    newAllowedAttributeOptions[attribute.id] =
                        allAttributes[attribute.id].options.filter(option => {
                            return !!option.products.find(product => {
                                return availableIndexes.includes(product);
                            })
                        });
                    previousOption = attribute.id;
                });
                return newAllowedAttributeOptions;
            },
            findAttributeByOptionId(optionId) {
                for (const attributeId in this.optionConfig.attributes) {
                    const attributeOptions = this.optionConfig.attributes[attributeId].options || [];
                    if (attributeOptions.find(option => option.id === optionId)) {
                        return attributeId;
                    }
                }
            },
            getAllowedAttributeOptions(attributeId) {
                return this.allowedAttributeOptions[attributeId] || []
            },
            getProductIdsForOption(option) {
                const attributeId = this.findAttributeByOptionId(option.id);
                const allOptions = this.optionConfig.attributes[attributeId];
                const opt = (allOptions && allOptions.options || []).find(o => o.id === option.id);
                return opt && opt.products
                    ? opt.products
                    : [];
            },
            findProductIdsForPartialSelection(optionSelection) {
                const candidateProducts = Object.values(optionSelection).reduce((candidates, optionId) => {
                    const newCandidates = this.getProductIdsForOption({id: optionId});
                    return candidates === null
                        ? newCandidates
                        : candidates.filter(productId => newCandidates.includes(productId));
                }, null);
                return candidateProducts || [];
            },
            findCheapestProductForPartialSelection(optionSelection) {
                const candidateProducts = this.findProductIdsForPartialSelection(optionSelection);
                return candidateProducts.reduce((cheapest, simpleIdx) => {
                    // in the first iteration we start with simpleIdx as the currently cheapest product
                    if (! this.optionConfig.optionPrices[cheapest]) return simpleIdx;
                    const knownCheapestPrice = this.optionConfig.optionPrices[cheapest].finalPrice.amount;
                    return knownCheapestPrice > this.optionConfig.optionPrices[simpleIdx].finalPrice.amount
                        ? simpleIdx
                        : cheapest;
                }, 0)
            },
            findProductIdToUseForOptionPrice(option) {
                // try to find a product for a complete selection
                const attributeId = this.findAttributeByOptionId(option.id);
                const optionSelection = Object.assign({}, this.selectedValues, {[attributeId]: option.id});
                const matchingSimpleIndex = this.calculateSimpleIndexForFullSelection(optionSelection);
                // if there is no complete selection, use the cheapest product for the option
                return matchingSimpleIndex || this.findCheapestProductForPartialSelection(optionSelection);
            },
            getAttributeOptionLabel(option) {
                const optionProduct = this.findProductIdToUseForOptionPrice(option);
                if ((! optionProduct) || (optionProduct === this.productIndex)) {
                    return option.label;
                }

                const currentPrice = this.getOptionPriceAdjustmentBasePrice();

                if (this.optionConfig.optionPrices[optionProduct]) {
                    const optionPrice = this.optionConfig.optionPrices[optionProduct].finalPrice.amount;
                    if (optionPrice !== currentPrice){
                        return option.label + ' ' + hyva.formatPrice(optionPrice - currentPrice, true);
                    }
                }
                return option.label;
            },
            getOptionPriceAdjustmentBasePrice() {
                if (this.optionConfig.optionPrices[this.productIndex]) {
                    return this.optionConfig.optionPrices[this.productIndex].finalPrice.amount
                }
                const cheapestForSelection = this.findCheapestProductForPartialSelection(this.selectedValues);
                return this.optionConfig.optionPrices[cheapestForSelection]
                    ? this.optionConfig.optionPrices[cheapestForSelection].finalPrice.amount
                    : this.optionConfig.prices.finalPrice.amount; // default price if no option selection
            },
            changeOption(optionId, value) {
                this.selectedValues[optionId] = value;
                this.findSimpleIndex();
                this.findAllowedAttributeOptions();
                this.updatePrices();
                this.updateGallery();
                window.dispatchEvent(
                    new CustomEvent(
                        'configurable-selection-changed',
                        {
                            detail: {
                                productId: this.productId,
                                optionId: this.optionId,
                                value: this.value,
                                productIndex: this.productIndex,
                                selectedValues: this.selectedValues
                            }
                        }
                    )
                );
            },
            calculateIsMinimalPrice() {
                return (
                    this.selectedValues.filter(value => !!value).length <
                        Object.keys(this.optionConfig.attributes).length
                );
            },
            updatePrices() {
                const value = this.productIndex ?
                    this.optionConfig.optionPrices[this.productIndex] :
                    this.optionConfig.prices;
                window.dispatchEvent(
                    new CustomEvent(
                        "update-prices-" + this.productId,
                        {
                            detail: Object.assign(
                                value,
                                { isMinimalPrice: this.calculateIsMinimalPrice() }
                            )
                        }
                    )
                );
            },
            updateGallery () {
                const value = this.productIndex ?
                    this.optionConfig.images[this.productIndex] :
                    Object.values(this.optionConfig.images)[0];

                value && window.dispatchEvent(
                    new CustomEvent(
                        "update-gallery",
                        { detail: value }
                    )
                );
            },
            onGetCartData(data) {
                this.preselectCartItems(data);
                this.preselectQuerystringItems();
                this.preselectLocationHashItems();
            },
            preselectCartItems(data) {
                // pre-select options based on cart data for current (quote) itemId
                const cart = data && data.cart;
                if (cart && cart.items) {
                    const cartItem = cart.items.find((item) => {
                        return (
                            item.item_id === this.itemId
                            && item.product_id === this.productId
                        )
                    });
                    if (cartItem && cartItem.options && cartItem.options.length) {
                        cartItem.options.map(option => {
                            this.changeOption(option.option_id, option.option_value);
                        })
                    }
                }
            },
            preselectQuerystringItems() {
                // pre-select option like ?size=167
                const urlQueryParams = new URLSearchParams(window.location.search.replace('?',''));
                Object.values(this.optionConfig.attributes).map(attribute => {
                    urlQueryParams.get(attribute.code) &&
                    this.changeOption(attribute.id, urlQueryParams.get(attribute.code));
                });
            },
            preselectLocationHashItems() {
                // pre-select option like #144=167
                const urlHashParams = new URLSearchParams(window.location.hash.replace('#',''));
                Object.values(this.optionConfig.attributes).map(attribute => {
                    urlHashParams.get(attribute.id) &&
                    this.changeOption(attribute.id, urlHashParams.get(attribute.id));
                });
            }
        }
    }

</script>
